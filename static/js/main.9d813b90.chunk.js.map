{"version":3,"sources":["service/MessageService.js","service/ChatService.js","redux/slices/chatSlice.js","redux/store.js","components/ChatBody/ChatMessage.jsx","components/ChatBody/ChatBodyText.jsx","components/ChatBody/ChatBodyHeader.jsx","components/ChatBody/ChatBodyWriteText.jsx","components/ChatBody/index.jsx","components/DropDownMenu/index.jsx","components/DropDownMenu/useDetectOutsideClick.js","components/ChatHeader/index.jsx","components/ChatSideBar/SearchItems.jsx","components/ChatSideBar/CardItem.jsx","components/ChatSideBar/CardItems.jsx","components/ChatSideBar/index.jsx","components/ChatAppContainer/index.jsx","App.js","index.js","constants.js"],"names":["messages","text","isOwnSentMessage","faker","lorem","sentence","getMessages","count","sort","Math","random","slice","length","users","generateUser","order","name","findName","coverPhoto","image","createdAt","description","sentences","email","internet","id","uuidv4","lastSeen","profilePhoto","avatar","username","userName","website","url","ChatService","getUsers","i","push","getLoggedInUser","loggedInUser","initialState","selectedUser","DEFAULT_USER","chatSlice","createSlice","reducers","setSelectedUser","state","action","find","user","payload","addConversation","message","map","actions","store","configureStore","reducer","chat","ChatMessage","showArrow","className","ChatBodyText","index","defaultProps","ChatBody","src","alt","data-testid","onClick","alert","ChatBodyWriteText","onDispatchHandler","useState","EMPTY","searchText","setSearchText","isValidTextToSend","key","trim","ENTER","CLICK","value","placeholder","onChange","e","target","onKeyDown","preventDefault","dispatch","useDispatch","useSelector","ChatBodyHeader","DropDownMenu","dropdownRef","useRef","el","isActive","setIsActive","useEffect","current","contains","window","addEventListener","removeEventListener","useDetectOutsideClick","ref","ChatHeader","Fragment","SearchItems","onSearchChange","type","CardItem","onClickHandler","SELECTED","CardItems","handleOnClick","isSelected","ChatSideBar","chatUsers","setUsers","searchString","filteredName","toLowerCase","filter","includes","ChatAppContainer","App","StrictMode","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9d813b90.chunk.js","sourcesContent":["\nimport faker from 'faker'\n\n/*** \n * messages @Object\n * Random Messages to show in User's Timeline  \n * @returns {Array} of Message - @Message - { text : @String, isOwnSentMessage: @Boolean }\n * */\nconst messages = [\n    { text: 'Yo!', isOwnSentMessage: true },\n    { text: 'It is really hard to run for 10KM in an hour!!', isOwnSentMessage: false},\n    { text: 'I got two tickets to go see this awesome band called, Lorem lpsum Dollars!! Do you want to come?', isOwnSentMessage: false },\n    { text: 'Hey, How are you doing?', isOwnSentMessage: false },\n    { text: 'It is gonna rain this weekend, so we probably need to rethink our lunch plan', isOwnSentMessage: false},\n    { text: faker.lorem.sentence(), isOwnSentMessage: true},\n    { text: 'I don\\'t think I will be able to make it, but I Heard they\\'re great! Have fun and let\\'s try and catch up at some point this week!', isOwnSentMessage: false },\n    { text: 'Yo! Lex is being a lill bi*ch!', isOwnSentMessage: false },\n    { text: 'My phone battery is dead. I will call you back once it is charged.', isOwnSentMessage: true},\n    { text: 'The network ain\\'t got shit on me!', isOwnSentMessage: true },\n    { text: 'Last night game was pretty Awesome! Raptors nailed it', isOwnSentMessage: false},\n    { text: 'Are you joining us for a lunch this week?', isOwnSentMessage: true },\n    { text: 'The weather is good. I hope it will not spoil the weekend plan!!', isOwnSentMessage: true},\n    { text: 'Have you seen Merton?', isOwnSentMessage: false },\n    { text: 'What\\'s your thoughts on picking up a delivery from the Apple Store', isOwnSentMessage: false},\n    { text: 'I really hope the new show is going to be a blockbuster!', isOwnSentMessage: true },\n    { text: 'I love listening to Simple Plan!!', isOwnSentMessage: false },\n    { text: 'How is your day going?', isOwnSentMessage: true },\n    { text: 'Are you okay sending over the list of the books that I need to buy?', isOwnSentMessage: false},\n  ]\n\n/**\n * A Helper method to Shuffle messages and return a random list of size @count\n * \n * @param {*} count {default = 1 } - No. of messages to be returned\n * @returns @Array of Messages\n * \n*/\nconst getMessages = (count = 1) => messages.sort(function() { return 0.5 - Math.random() }).slice(1, count < messages.length ? count : messages.length -1)\n\nexport default getMessages;\n","\nimport faker from 'faker'\nimport { v4 as uuidv4 } from 'uuid';\nimport getMessages from './MessageService'\n\nconst users = []\nconst USER_COUNT = 7\n\n/**\n* The Current LoggedIn User Details \n* @returns @User Object\n*/\nconst getLoggedInUser = () => {\n  return {\n    order: 0,\n    email: 'bhopalsinghsis@gmail.com',\n    id: uuidv4(),\n    lastSeen: 'Oct 10, 2021 03:24:00',\n    messages: getMessages(USER_COUNT),\n    name: 'Bhopal Singh',\n    profilePhoto: 'https://avatars.githubusercontent.com/u/17331876?s=400&u=09765a4e69d46ba6b92c81673b3a4e06be110bc6&v=4',\n    username: 'bsingh'\n  }\n}\n\n/**\n* Make use of Faker library to generate FAKE USERS\n* @param {*} count - default {USER_COUNT} - Number of fake users to be generated.\n* @returns @Array of @User Object\n*/\nconst getUsers = (count = USER_COUNT) => {  \n  const length = users.length\n  let i = 0\n  while(length === 0 && --count >=0 )\n    users.push(generateUser(++i))\n  return users\n}\n\n/**\n* To Generate User Date - Fake data generator library - [https://github.com/marak/Faker.js/]\n* @returns an @User Object\n*/\nconst generateUser = (order) => {\n    const createdAt = 'May 17, 2021 03:24:00'\n    const name = faker.name.findName();\n    return {\n        coverPhoto: faker.image.image(),\n        createdAt,\n        description: faker.lorem.sentences(),\n        email: faker.internet.email(name),\n        id: uuidv4(),\n        lastSeen: 'Oct 15, 2021 03:24:00',\n        messages: getMessages(USER_COUNT),\n        name: faker.name.findName(),\n        order,\n        profilePhoto: faker.internet.avatar(),\n        username: faker.internet.userName(name),\n        website: faker.internet.url()\n    };\n}\n\nconst ChatService = {\n  getUsers,\n  getLoggedInUser\n}\n\nexport default ChatService\n\n","import { createSlice } from '@reduxjs/toolkit'\nimport ChatService from './../../service/ChatService'\n\nconst users = ChatService.getUsers()\nconst loggedInUser = ChatService.getLoggedInUser()\nconst initialState = { users, selectedUser: users.length > 0 ? users[0] : loggedInUser, loggedInUser }\nconst DEFAULT_USER = loggedInUser\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n\tsetSelectedUser(state, action) {\n\t\tconst selectedUser = state.users.find( user => user.id === action.payload.id) || DEFAULT_USER\n\t\treturn {\n\t\t\t...state, selectedUser\n\t\t}\n\t},\n\taddConversation (state, action) {\n\t\tlet selectedUser;\n\t\tconst { id, message } = action.payload\n\t\tconst users = state.users.map(user => {\n\t\t\tif(user.id === id) {\n\t\t\t\tuser = { ...user, messages: [...user.messages, { text: message, isOwnSentMessage: false }] };\n\t\t\t\tselectedUser = user\n\t\t\t}\n\t\t\treturn user;\n\t\t})\n\t\treturn {\n\t\t\t...state, \n\t\t\tselectedUser,\n\t\t\tusers: [...users]\n\t\t}\n\t}\n  },\n})\n\nexport const { setSelectedUser, addConversation } = chatSlice.actions\nexport default chatSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\nimport chat from './slices/chatSlice'\n\nexport const store = configureStore({\n\treducer: {\n\t\tchat\n\t}\n})","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst ChatMessage = ({ message, showArrow, isOwnSentMessage }) => {\n  return (\n    <div className={`chat-body-message ${ isOwnSentMessage ? ( showArrow ? 'dark arrow-top ' : 'dark ') : (showArrow ? 'light arrow-bottom  ' :'light ')}`}>\n        {message}\n    </div>\n  )\n}\n\nChatMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  showArrow: PropTypes.bool.isRequired,\n  isOwnSentMessage: PropTypes.bool.isRequired\n}\n\nexport default ChatMessage;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ChatMessage from './ChatMessage'\n\nconst ChatBodyText = ({ messages }) => {\n  return (\n    <div className='chat-body-text'>\n        { messages.map((message, index) => <ChatMessage key={index} message={message.text} isOwnSentMessage={message.isOwnSentMessage} showArrow={ index === 0 || index === messages.length -1 } />) }\n    </div>\n  )\n}\n\nChatBodyText.defaultProps = {\n  messages: []\n}\n\nChatBodyText.propTypes = {\n  messages: PropTypes.array.isRequired\n}\n\nexport default ChatBodyText;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst ChatBody = ({ user }) => {\n  return (\n    <div className='chat-body-header'>\n        <div className='chat-body-user-profile'>\n            <div className='chat-body-avatar'>\n                <img src={user.profilePhoto} alt={user.name}/> \n            </div>\n            <div className='chat-body-title'>{user.name}</div>\n        </div>\n        <div className='chat-body-actions'>\n            <div data-testid='chat-body-message' className='chat-app-icon message-icon' onClick={() => alert('Please Type a message in the Input field provided. Once you have entered the TEXT Message, Kindly press ENTER or CLICK on Message Icon given next to it to SEND your message.')}/>\n            <div data-testid='chat-body-video' className='chat-app-icon video-icon' onClick={() => alert('Video Call feature is not Supported!!')}/>\n            <div data-testid='chat-body-call' className='chat-app-icon call-icon' onClick={() => alert('Phone Call feature is not Supported!!')}/>\n        </div>\n    </div>\n  )\n}\n\nChatBody.propTypes = {\n  user: PropTypes.object.isRequired\n}\n\nexport default ChatBody;\n","import React, { useState }  from 'react'\nimport PropTypes from 'prop-types'\nimport { CLICK, EMPTY, ENTER } from '../../constants';\n\nconst ChatBodyWriteText = ({ onDispatchHandler }) => {\n\n  const [searchText, setSearchText] = useState(EMPTY)\n  \n  const isValidTextToSend = (text, key) => text && text.trim().length !== 0 && (key === ENTER || key === CLICK)\n\n  const onKeyDownHandler = (e) => {\n    if (isValidTextToSend(searchText, e.key)) {\n      onDispatchHandler(searchText.trim())\n      setSearchText(EMPTY)\n      e.preventDefault()\n    } \n  }\n\n  const onMessageSendHandler = () => {\n    if (isValidTextToSend(searchText, CLICK)) {\n      onDispatchHandler(searchText.trim())\n      setSearchText(EMPTY)\n    } \n  }\n\n  return (\n    <div className='chat-body-write-text'>\n        <div className='chat-body-write-text-area'>\n          <textarea data-testid='chat-message-id' value={searchText} placeholder='Write a message...' onChange={(e) => setSearchText(e.target.value)} onKeyDown={onKeyDownHandler} />\n        </div>\n        <div className='chat-body-write-text-buttons'>\n            <div data-testid='chat-message-send-id'  className='chat-app-icon write-message-icon' onClick={onMessageSendHandler} />\n            <div className='chat-app-icon microphone-icon' onClick={() => alert('Sending an audio to participants is not Supported!!')} />\n        </div>\n    </div>\n  )\n}\n\nChatBodyWriteText.propTypes = {\n  onDispatchHandler: PropTypes.func.isRequired\n}\n\nexport default ChatBodyWriteText;\n\n\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ChatBodyText from './ChatBodyText'\nimport ChatBodyHeader from './ChatBodyHeader'\nimport ChatBodyWriteText from './ChatBodyWriteText'\nimport { addConversation } from './../../redux/slices/chatSlice'\n\nimport './ChatBody.css'\n\nconst ChatBody = () => {\n  \n  const dispatch = useDispatch();\n  const { selectedUser } = useSelector(state => state.chat);\n  const { messages } = selectedUser\n\n  const handleOnDispatch= (message) => dispatch(addConversation({ id: selectedUser.id, message}))\n  \n  return (\n    <div className='chat-body'>\n      <ChatBodyHeader user={selectedUser} />\n      <ChatBodyText messages={messages} />\n      <ChatBodyWriteText onDispatchHandler={handleOnDispatch} />\n    </div>\n  )\n}\n\n\nexport default ChatBody;\n\n\n","import React, { useRef } from 'react';\nimport { useDetectOutsideClick } from './useDetectOutsideClick';\n\nimport './index.css'\n\nexport default function DropDownMenu ({ user = {} }) {\n\n  const dropdownRef = useRef(null);\n  const { email, name, username, messages, lastSeen } = user\n  const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false);\n  \n  const onClick = () => setIsActive(!isActive);\n  \n  return (\n    <div className='drop-down-menu-container'>\n      <div className='down-arrow-icon down-arrow drop-down-menu-trigger' onClick={onClick}></div>  \n      <nav ref={dropdownRef} className={`drop-down-menu-items ${isActive ? 'active' : 'inactive'}`} >\n        <ul className='user-profile'>\n           <li>{name}</li>\n           <li>Signed in as <b>{username}</b></li>\n           <li>{email}</li>\n           <li>Messages Received &nbsp;<b><span className='messages-count'>{messages.length}</span></b></li>\n           <li>Status <b><span className='green-dot'></span>Online</b></li>\n           <li>Last Seen on <b><span className='last-seen'></span>{lastSeen}</b></li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport const useDetectOutsideClick = (el, initialState) => {\n  const [isActive, setIsActive] = useState(initialState);\n\n  useEffect(() => {\n    const onClick = e => {\n      if (el.current !== null && !el.current.contains(e.target)) {\n        setIsActive(!isActive);\n      }\n    };\n\n    if (isActive) {\n      window.addEventListener('click', onClick);\n    }\n\n    return () => {\n      window.removeEventListener('click', onClick);\n    };\n  }, [isActive, el]);\n\n  return [isActive, setIsActive];\n};\n","import React from 'react'\nimport { useSelector } from 'react-redux';\n\nimport DropDownMenu from './../DropDownMenu'\n\nimport './index.css'\n\nconst ChatHeader = () => {\n\n  const user = useSelector(state => state.chat.loggedInUser);\n  \n  return (\n    <React.Fragment>\n      <div className=\"chat-header\">\n         <div className='left'>\n              <span className='close' />\n              <span className='minimize' />\n              <span className='maximize' />\n          </div>\n          <div className='right'>\n              <div className='user-profile'>\n                  <div className='user-avatar'><img src={user.profilePhoto} alt={user.name} /></div>\n                  <div className='user-name'>{user.name}</div>\n                  <div><DropDownMenu user={user} /></div>\n              </div>\n          </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default ChatHeader;\n\n","import PropTypes from 'prop-types'\nimport React, { useState }  from 'react'\nimport { EMPTY } from '../../constants';\n\nconst SearchItems = ({ onSearchChange }) => {\n\n  const [searchText, setSearchText] = useState(EMPTY)\n\n  const onChangeHandler = (e) => {\n    const value = (e && e.target.value.trim()) || EMPTY\n    setSearchText(value)\n    onSearchChange(value)\n  }\n  \n  return (\n    <div className='chat-side-bar-search'>\n      <div className='search-box'>\n        <div className='chat-app-icon search-icon search' />\n          <input data-testid='search-items' type='text' placeholder='Search...' value={searchText} onChange={onChangeHandler} />\n      </div>\n      <div className='chat-app-icon compose-message-icon compose-message' onClick={() => alert('Please Type a message in the Input field provided. Once you have entered the TEXT Message, Kindly press ENTER or CLICK on Message Icon given next to it to SEND your message.')}/>      \n    </div>\n  )\n}\n\nSearchItems.propTypes = {\n  onSearchChange: PropTypes.func.isRequired\n}\n\nexport default SearchItems\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux';\n\nimport { EMPTY, SELECTED } from '../../constants';\n\nconst CardItem = ({ user, onClickHandler }) => {\n  \n  const { users, selectedUser } = useSelector(state => state.chat);\n  const { messages = [] } = users.find(({ id }) => id === user.id) || selectedUser\n\n  return (\n    <div data-testid='card-item-click' className={`card-item ${ selectedUser.id === user.id ? SELECTED : EMPTY }`} onClick={() => onClickHandler(user)} key={user.id}>\n        <div className='avatar'>\n            <img src={user.profilePhoto} alt={`${user.name} Avatar`}/> \n        </div>\n        <div className='profile'>\n            <div className={`name ${user.order > 2 ? 'two' : 'one'}`}>{user.name}</div>\n            <div className='preview'>{ messages.length > 0 ? messages[messages.length - 1].text : EMPTY }</div>\n        </div>\n    </div>\n  )\n}\n\nCardItem.defaultProps = {\n   user:  {}\n}\n\nCardItem.propTypes = {\n    user: PropTypes.object.isRequired,\n    onClickHandler: PropTypes.func.isRequired\n}\n\nexport default CardItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport CardItem from './CardItem'\nimport { setSelectedUser } from './../../redux/slices/chatSlice'\n\n\nconst CardItems = ({ users }) => {\n\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(state => state.chat.selectedUser);\n\n  const handleOnClick = (user) => dispatch(setSelectedUser(user))\n\n  return (\n    <div className='card-items'>\n       {users.map((user, index) => <CardItem user={user} onClickHandler={handleOnClick} isSelected= { selectedUser.id === user.id} key={index} />)}\n    </div>\n  )\n}\n\nCardItems.defaultProps = {\n  users: []\n}\n\nCardItems.propTypes = {\n  users: PropTypes.array.isRequired\n}\n\nexport default CardItems\n","import React, { useState }  from 'react'\nimport SearchItems from './SearchItems'\nimport CardItems from './CardItems'\nimport { useSelector } from 'react-redux';\n\nimport './index.css'\n\nconst ChatSideBar = () => {\n\n  const chatUsers = useSelector(state => state.chat.users);\n\n  const [users, setUsers] = useState(chatUsers)\n\n  const getMatchedUsers = (filteredName) => chatUsers.filter(({ name }) => name.toLowerCase().includes(filteredName))\n\n  const handleOnSearch = (searchString) => setUsers(getMatchedUsers(searchString.toLowerCase()))\n\n  return (\n    <div className=\"chat-side-bar\">\n        <SearchItems onSearchChange={handleOnSearch} />\n        <CardItems users={users} />\n    </div>\n  )\n}\n\nexport default ChatSideBar;\n\n\n\n","import React from 'react'\n\nimport ChatBody from './../ChatBody'\nimport ChatHeader from './../ChatHeader'\nimport ChatSideBar from './../ChatSideBar'\n\nimport './index.css'\n\nexport default function ChatAppContainer () {\n  return (\n    <React.Fragment>\n      <div className='chat-app-container'>\n          <div className='header-container'>\n            <ChatHeader />\n          </div>\n          <div className='body-container'>\n            <div className='panel left-panel'>\n              <ChatSideBar />\n            </div>\n            <div className='panel right-panel'>\n              <ChatBody />\n            </div>\n          </div>\n        </div>\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport {store} from './redux/store';\nimport ChatAppContainer from \"./components/ChatAppContainer\"\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <Provider store={store}>\n        <ChatAppContainer />\n      </Provider>\n  </React.StrictMode>\n  )\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","module.exports = {\n    CLICK: 'click',\n    EMPTY: '',\n    ENTER: 'Enter',\n    SELECTED: 'selected'\n}"],"sourceRoot":""}